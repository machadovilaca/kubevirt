package main

import (
	"bufio"
	"fmt"
	"io"
	"os"
	"sort"
	"strings"

	"github.com/machadovilaca/operator-observability/pkg/operatormetrics"

	virt_api "kubevirt.io/kubevirt/pkg/monitoring/metrics/virt-api"
	virt_controller "kubevirt.io/kubevirt/pkg/monitoring/metrics/virt-controller"
	virt_handler "kubevirt.io/kubevirt/pkg/monitoring/metrics/virt-handler"
	virt_operator "kubevirt.io/kubevirt/pkg/monitoring/metrics/virt-operator"
	"kubevirt.io/kubevirt/pkg/monitoring/rules"
)

// constant parts of the file
const (
	genFileComment = `<!--
	This is an auto-generated file.
	PLEASE DO NOT EDIT THIS FILE.
	See "Developing new metrics" below how to generate this file
-->`
	title      = "# KubeVirt metrics\n"
	background = "This document aims to help users that are not familiar with all metrics exposed by different KubeVirt components.\n" +
		"All metrics documented here are auto-generated by the utility tool `tools/doc-generator` and reflects exactly what is being exposed.\n\n"

	KVSpecificMetrics = "## KubeVirt Metrics List\n" +
		"### kubevirt_info\n" +
		"Version information.\n\n"

	opening = genFileComment + "\n\n" +
		title +
		background +
		KVSpecificMetrics

	// footer
	footerHeading = "## Developing new metrics\n"
	footerContent = "After developing new metrics or changing old ones, please run `make generate` to regenerate this document.\n\n" +
		"If you feel that the new metric doesn't follow these rules, please change `doc-generator` with your needs.\n"

	footer = footerHeading + footerContent
)

func main() {
	var metrics metricList

	err := virt_controller.SetupMetrics(nil, nil, nil, nil, nil, nil, nil, nil)
	checkError(err)
	for _, m := range virt_controller.ListMetrics() {
		metrics = append(metrics, newMetric(m))
	}

	err = virt_api.SetupMetrics()
	checkError(err)
	for _, m := range virt_api.ListMetrics() {
		metrics = append(metrics, newMetric(m))
	}

	err = virt_operator.SetupMetrics()
	checkError(err)
	for _, m := range virt_operator.ListMetrics() {
		metrics = append(metrics, newMetric(m))
	}

	err = virt_handler.SetupMetrics()
	checkError(err)
	for _, m := range virt_handler.ListMetrics() {
		metrics = append(metrics, newMetric(m))
	}

	err = rules.SetupRules("")
	checkError(err)

	for _, rule := range rules.ListRecordingRules() {
		metrics = append(metrics, metric{
			name:        rule.GetOpts().Name,
			description: rule.GetOpts().Help,
			mType:       string(rule.GetType()),
		})
	}

	writeToFile(metrics)
}

func writeToFile(metrics metricList) {
	newFile, err := os.Create("newmetrics.md")
	checkError(err)
	defer newFile.Close()

	fmt.Fprint(newFile, opening)
	metrics.writeToFile(newFile)

	fmt.Fprint(newFile, footer)

}

type metric struct {
	name        string
	description string
	mType       string
}

func (m metric) writeToFile(newFile io.WriteCloser) {
	fmt.Fprintln(newFile, "###", m.name)
	fmt.Fprintln(newFile, m.description, "Type:", m.mType+".")
	fmt.Fprintln(newFile)
}

type metricList []metric

// Len implements sort.Interface.Len
func (m metricList) Len() int {
	return len(m)
}

// Less implements sort.Interface.Less
func (m metricList) Less(i, j int) bool {
	return m[i].name < m[j].name
}

// Swap implements sort.Interface.Swap
func (m metricList) Swap(i, j int) {
	m[i], m[j] = m[j], m[i]
}

func (m metricList) writeToFile(newFile io.WriteCloser) {
	for _, met := range m {
		met.writeToFile(newFile)
	}
}

func newMetric(om operatormetrics.Metric) metric {
	return metric{
		name:        om.GetOpts().Name,
		description: om.GetOpts().Help,
		mType:       strings.Replace(string(om.GetType()), "Vec", "", 1),
	}
}

func parseMetricDesc(line string) (string, string) {
	split := strings.Split(line, " ")
	name := split[2]
	split[3] = strings.Title(split[3])
	description := strings.Join(split[3:], " ")
	return name, description
}

func parseMetricType(scan *bufio.Scanner, name string) string {
	for scan.Scan() {
		typeLine := scan.Text()
		if strings.HasPrefix(typeLine, "# TYPE ") {
			split := strings.Split(typeLine, " ")
			if split[2] == name {
				return strings.Title(split[3])
			}
		}
	}
	return ""
}

const filter = "kubevirt_"

func parseVirtMetrics(r io.Reader, metrics *metricList) error {
	scan := bufio.NewScanner(r)
	for scan.Scan() {
		helpLine := scan.Text()
		if strings.HasPrefix(helpLine, "# HELP ") {
			if strings.Contains(helpLine, filter) {
				metName, metDesc := parseMetricDesc(helpLine)
				metType := parseMetricType(scan, metName)
				*metrics = append(*metrics, metric{name: metName, description: metDesc, mType: metType})
			}
		}
	}

	if scan.Err() != nil {
		return fmt.Errorf("failed to parse metrics from prometheus endpoint, %w", scan.Err())
	}

	sort.Sort(metrics)

	// remove duplicates
	for i := 0; i < len(*metrics)-1; i++ {
		if (*metrics)[i].name == (*metrics)[i+1].name {
			*metrics = append((*metrics)[:i], (*metrics)[i+1:]...)
			i--
		}
	}

	return nil
}

func checkError(err error) {
	if err != nil {
		panic(err)
	}
}
